{"version":3,"sources":["serviceWorker.js","ReactYoutube/Firebase.js","ReactYoutube/reactyoutube.js","ReactYoutube/showvideo.js","ReactYoutube/playlist.js","index.js"],"names":["Boolean","window","location","hostname","match","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Reactyoutube","props","onCollectionUpdate","querySnapshot","ytlinks","forEach","doc","data","title","emblink","push","key","id","setState","ref","firestore","collection","unsubscribe","state","this","onSnapshot","event","console","log","target","opts","height","width","playerVars","color","playlist","map","ytlink","split","toString","onReady","videoOnReady","Component","Showvideo","className","href","Playlist","class","src","allowFullScreen","ReactDOM","render","StrictMode","path","exact","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.76484e6a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as firebase from 'firebase';\r\n// import firestore from 'firebase/firestore'\r\n\r\n\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyAWCoub6quvjEY-I4sAO3hcTlBEAfaDcc8\",\r\n    authDomain: \"app-6d62c.firebaseapp.com\",\r\n    databaseURL: \"https://app-6d62c.firebaseio.com\",\r\n    projectId: \"app-6d62c\",\r\n    storageBucket: \"app-6d62c.appspot.com\",\r\n    messagingSenderId: \"1075551474912\",\r\n    appId: \"1:1075551474912:web:776b6d2da0cf2d8392ac85\",\r\n    measurementId: \"G-8V8W0JLNRE\"\r\n  };\r\n  firebase.initializeApp(config);\r\n  \r\n\r\n  \r\n  export default firebase;","import React, { Component } from \"react\";\r\nimport YouTube from \"react-youtube\";\r\nimport firebase from \"./Firebase\";\r\n\r\nclass Reactyoutube extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.ref = firebase.firestore().collection(\"youtubeLinks\");\r\n        this.unsubscribe = null;\r\n        this.state = {\r\n          ytlinks: [],\r\n        };\r\n      }\r\n    \r\n      onCollectionUpdate = (querySnapshot) => {\r\n        const ytlinks = [];\r\n        querySnapshot.forEach((doc) => {\r\n          const { title, emblink } = doc.data();\r\n          ytlinks.push({\r\n            key: doc.id,\r\n            doc, // DocumentSnapshot\r\n            title,\r\n            emblink,\r\n          });\r\n        });\r\n        this.setState({\r\n          ytlinks,\r\n        });\r\n      };\r\n    \r\n      componentDidMount() {\r\n        this.unsubscribe = this.ref.onSnapshot(this.onCollectionUpdate);\r\n      }\r\n\r\n\r\n\r\n  videoOnReady(event) {\r\n    // access to player in all event handlers via event.target\r\n    // event.target.pauseVideo();\r\n    console.log(event.target)\r\n  }\r\n\r\n//   videoOnChangeState(event) {\r\n//     event.target.nextVideo();\r\n//   }\r\n  render() {\r\n\r\n    const plink = this.state.ytlinks.map((ytlink) => ytlink.emblink.split('/')[4])\r\n\r\n    const opts = {\r\n      height: \"390\",\r\n      width: \"640\",\r\n      playerVars: {\r\n        // https://developers.google.com/youtube/player_parameters\r\n        // autoplay: 1,\r\n        color: 'white',\r\n        // next, prev video\r\n        playlist: plink.toString()\r\n      },\r\n    };\r\n    // const {videoId} = this.props\r\n    return (\r\n      <YouTube   opts={opts} onReady={this.videoOnReady}    />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Reactyoutube;\r\n","import React, { Component } from \"react\";\r\nimport Reactyoutube from \"./reactyoutube\";\r\n\r\n\r\nclass Showvideo extends Component {\r\n  render() {\r\n    return (\r\n        // v64KOxKVLVg\r\n      <div className=\"container\">\r\n        <div className=\"card\">\r\n          <div className=\"card-body\">\r\n            <h3 className=\"card-title\">Vide Title</h3>\r\n            <a href=\"/playlist\" >Playlist</a>\r\n            <Reactyoutube  />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Showvideo;\r\n","import React, { Component } from \"react\";\nimport firebase from \"./Firebase\";\n\nclass Playlist extends Component {\n  constructor(props) {\n    super(props);\n    this.ref = firebase.firestore().collection(\"youtubeLinks\");\n    this.unsubscribe = null;\n    this.state = {\n      ytlinks: [],\n    };\n  }\n\n  onCollectionUpdate = (querySnapshot) => {\n    const ytlinks = [];\n    querySnapshot.forEach((doc) => {\n      const { title, emblink } = doc.data();\n      ytlinks.push({\n        key: doc.id,\n        doc, // DocumentSnapshot\n        title,\n        emblink,\n      });\n    });\n    this.setState({\n      ytlinks,\n    });\n  };\n\n  componentDidMount() {\n    this.unsubscribe = this.ref.onSnapshot(this.onCollectionUpdate);\n  }\n\n  render() {\n\n    return (\n      <div className=\"container\">\n        <div className=\"card\">\n          <div className=\"card-body\">\n            <h3 className=\"card-title\">Playlist</h3>\n            <a href=\"/\">ShowVideo</a>\n            <div class=\"table-responsive\">\n              <table className=\"table table-striped\">\n                <thead className=\"thead-light\">\n                  <tr>\n                    <th>Title</th>\n                    <th>VideoID</th>\n                    <th>video</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {this.state.ytlinks.map((ytlink) => (\n                    <tr>\n                      <td>{ytlink.title}</td>\n                      <td>{ytlink.emblink.split('/')[4]}</td>\n                      <td>\n                        <iframe\n                          title={ytlink.title}\n                          className=\"embed-responsive-item\"\n                          src={ytlink.emblink}\n                          allowFullScreen\n                        ></iframe>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Playlist;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Showvideo from './ReactYoutube/showvideo';\nimport { Switch, Route } from \"react-router-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport Playlist from './ReactYoutube/playlist';\nReactDOM.render(\n  <React.StrictMode>\n            <Router >\n          <Switch>\n          <Route path=\"/\" exact={true} component={Showvideo} />\n            <Route path=\"/playlist\" component={Playlist} />\n          </Switch>\n          </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}