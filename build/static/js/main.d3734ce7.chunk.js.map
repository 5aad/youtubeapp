{"version":3,"sources":["serviceWorker.js","ReactYoutube/Firebase.js","ReactYoutube/playlist.js","ReactYoutube/showvideo.js","index.js"],"names":["Boolean","window","location","hostname","match","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Playlist","props","onCollectionUpdate","querySnapshot","ytlinks","forEach","doc","data","title","emblink","push","key","id","plink","map","ytlink","split","setState","links","link","index","handleLinks","e","target","value","state","length","ind","intialize","ref","firestore","collection","unsubscribe","this","onSnapshot","className","videoId","opts","height","width","class","onClick","Component","Showvideo","ReactDOM","render","StrictMode","path","exact","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yOAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,0DCHJC,gBAVa,CACXC,OAAQ,0CACRC,WAAY,4BACZC,YAAa,mCACbC,UAAW,YACXC,cAAe,wBACfC,kBAAmB,gBACnBC,MAAO,6CACPC,cAAe,iBAMFR,QCqFFS,G,wDAlGb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAWRC,mBAAqB,SAACC,GACpB,IAAMC,EAAU,GAChBD,EAAcE,SAAQ,SAACC,GAAS,IAAD,EACFA,EAAIC,OAAvBC,EADqB,EACrBA,MAAOC,EADc,EACdA,QACfL,EAAQM,KAAK,CACXC,IAAKL,EAAIM,GACTN,MACAE,QACAC,eAGJ,IAAMI,EAAQT,EAAQU,KAAI,SAACC,GAAD,OAAYA,EAAON,QAAQO,MAAM,KAAK,MAChE,EAAKC,SAAS,CACZb,UACAc,MAAOL,EACPM,KAAMN,EAAM,GACZO,MAAO,KA5BQ,EAoCnBC,YAAc,SAACC,GACb,GAAuB,SAAnBA,EAAEC,OAAOC,MACX,GAAyB,IAArB,EAAKC,MAAML,MACb,EAAKH,SAAS,CACZG,MAAO,EAAKK,MAAMP,MAAMQ,OAAS,EACjCP,KAAM,EAAKM,MAAMP,MAAM,EAAKO,MAAMP,MAAMQ,OAAS,SAE9C,CACL,IAAMC,EAAM,EAAKF,MAAML,MAAQ,EAC/B,EAAKH,SAAS,CACZG,MAAOO,EACPR,KAAM,EAAKM,MAAMP,MAAMS,UAGtB,GAAuB,SAAnBL,EAAEC,OAAOC,MAClB,GAAI,EAAKC,MAAML,QAAU,EAAKK,MAAMP,MAAMQ,OAAS,EACjD,EAAKT,SAAS,CACZG,MAAO,EACPD,KAAM,EAAKM,MAAMP,MAAM,UAEpB,GAAI,EAAKO,MAAML,MAAQ,EAAKK,MAAMP,MAAMQ,OAAS,EAAG,CACzD,IAAMC,EAAM,EAAKF,MAAML,MAAQ,EAC/B,EAAKH,SAAS,CACZG,MAAOO,EACPR,KAAM,EAAKM,MAAMP,MAAMS,OA5DZ,EAkEnBC,UAAY,aAhEV,EAAKC,IAAMtC,EAASuC,YAAYC,WAAW,gBAC3C,EAAKC,YAAc,KACnB,EAAKP,MAAQ,CACXrB,QAAS,GACTc,MAAO,GACPC,KAAM,GACNC,MAAO,GARQ,E,gEAiCjBa,KAAKD,YAAcC,KAAKJ,IAAIK,WAAWD,KAAK/B,sB,+BAkCpC,IAAD,OAKP,OACE,6BACE,yBAAKiC,UAAU,2CACb,kBAAC,IAAD,CAASC,QAASH,KAAKR,MAAMN,KAAMkB,KAP5B,CACXC,OAAQ,MACRC,MAAO,UAOL,yBAAKJ,UAAU,UAAUvB,GAAG,QAC1B,4BACE4B,MAAM,QACNhB,MAAM,OACNiB,QAAS,SAACnB,GAAD,OAAO,EAAKD,YAAYC,KAEjC,uBAAGkB,MAAM,0BAEX,4BACEA,MAAM,QACNhB,MAAM,OACNiB,QAAS,SAACnB,GAAD,OAAO,EAAKD,YAAYC,KAEjC,uBAAGkB,MAAM,+B,GA3FEE,cCYRC,E,uKAZX,OACE,yBAAKR,UAAU,aACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,aACb,kBAAC,EAAD,a,GANYO,a,gBCKxBE,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,cAAcC,OAAO,EAAMC,UAAWN,OAIxDO,SAASC,eAAe,SJmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d3734ce7.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as firebase from 'firebase';\r\n// import firestore from 'firebase/firestore'\r\n\r\n\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyAWCoub6quvjEY-I4sAO3hcTlBEAfaDcc8\",\r\n    authDomain: \"app-6d62c.firebaseapp.com\",\r\n    databaseURL: \"https://app-6d62c.firebaseio.com\",\r\n    projectId: \"app-6d62c\",\r\n    storageBucket: \"app-6d62c.appspot.com\",\r\n    messagingSenderId: \"1075551474912\",\r\n    appId: \"1:1075551474912:web:776b6d2da0cf2d8392ac85\",\r\n    measurementId: \"G-8V8W0JLNRE\"\r\n  };\r\n  firebase.initializeApp(config);\r\n  \r\n\r\n  \r\n  export default firebase;","import React, { Component } from \"react\";\r\nimport YouTube from \"react-youtube\";\r\nimport firebase from \"./Firebase\";\r\nimport \"./size.css\";\r\n\r\nclass Playlist extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.ref = firebase.firestore().collection(\"youtubeLinks\");\r\n    this.unsubscribe = null;\r\n    this.state = {\r\n      ytlinks: [],\r\n      links: [],\r\n      link: \"\",\r\n      index: 0,\r\n    };\r\n  }\r\n\r\n  onCollectionUpdate = (querySnapshot) => {\r\n    const ytlinks = [];\r\n    querySnapshot.forEach((doc) => {\r\n      const { title, emblink } = doc.data();\r\n      ytlinks.push({\r\n        key: doc.id,\r\n        doc, // DocumentSnapshot\r\n        title,\r\n        emblink,\r\n      });\r\n    });\r\n    const plink = ytlinks.map((ytlink) => ytlink.emblink.split(\"/\")[4]);\r\n    this.setState({\r\n      ytlinks,\r\n      links: plink,\r\n      link: plink[0],\r\n      index: 0,\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.unsubscribe = this.ref.onSnapshot(this.onCollectionUpdate);\r\n  }\r\n\r\n  handleLinks = (e) => {\r\n    if (e.target.value === \"back\") {\r\n      if (this.state.index === 0) {\r\n        this.setState({\r\n          index: this.state.links.length - 1,\r\n          link: this.state.links[this.state.links.length - 1],\r\n        });\r\n      } else {\r\n        const ind = this.state.index - 1;\r\n        this.setState({\r\n          index: ind,\r\n          link: this.state.links[ind],\r\n        });\r\n      }\r\n    } else if (e.target.value === \"next\") {\r\n      if (this.state.index === this.state.links.length - 1) {\r\n        this.setState({\r\n          index: 0,\r\n          link: this.state.links[0],\r\n        });\r\n      } else if (this.state.index < this.state.links.length - 1) {\r\n        const ind = this.state.index + 1;\r\n        this.setState({\r\n          index: ind,\r\n          link: this.state.links[ind],\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  intialize = () => {};\r\n  render() {\r\n    const opts = {\r\n      height: \"390\",\r\n      width: \"640\",\r\n    };\r\n    return (\r\n      <div>\r\n        <div className=\"embed-responsive embed-responsive-16by9\">\r\n          <YouTube videoId={this.state.link} opts={opts} />\r\n        </div>\r\n        <div className=\"sq py-2\" id=\"hide\">\r\n          <button\r\n            class=\"float\"\r\n            value=\"back\"\r\n            onClick={(e) => this.handleLinks(e)}\r\n          >\r\n            <i class=\"fa fa-step-backward \"></i>\r\n          </button>\r\n          <button\r\n            class=\"float\"\r\n            value=\"next\"\r\n            onClick={(e) => this.handleLinks(e)}\r\n          >\r\n            <i class=\"fa fa-step-forward \"></i>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Playlist;\r\n","import React, { Component } from \"react\";\r\nimport Playlist from \"./playlist\";\r\n\r\nclass Showvideo extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"card\">\r\n          <div className=\"card-body\">\r\n            <Playlist />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Showvideo;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Showvideo from \"./ReactYoutube/showvideo\";\nimport { Switch, Route } from \"react-router-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <Switch>\n        <Route path=\"/youtubeapp\" exact={true} component={Showvideo} />\n      </Switch>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}